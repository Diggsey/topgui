#constant guiId integer

type guiInteractionType
    deltaX as integer
    deltaY as integer
    deltaW as integer
    deltaH as integer
    scrollX as integer
    scrollY as integer
endtype

` All global non-array data related to the gui should be stored in here:
type guiContextType
    hotId as guiId
    activeId as guiId
    nextHotId as guiId
    stayActive as boolean
    msc as integer  ` Mouse click
    msx as integer  ` Mouse X
    msy as integer  ` Mouse Y
    omc as integer  ` Old mouse click
    omx as integer  ` Old mouse X
    omy as integer  ` Old mouse Y
    msd as integer  ` Mouse down
    msu as integer  ` Mouse up
    fontId as integer
    defaultFontId as integer
    dragMode as integer
    dragX as integer
    dragY as integer
    delayTime as integer
    
    ` Moving/resizing
    interaction as guiInteractionType
    
    ` Focus data
    focusId as guiId
    oldFocusId as guiId
    veryOldFocusId as guiId
    newFocusId as guiId
    prevFocusId as guiId
    nextFocusId as guiId
    overrideFocusId as guiId
    selStart as integer
    selEnd as integer
    entryBuffer as string
    cursorTimer as integer
    tempScroll as integer
endtype

type guiRectType
    x1 as integer
    y1 as integer
    x2 as integer
    y2 as integer
    offsetx as integer
    offsety as integer
endtype

global gui as guiContextType

` Initialize gui
function guiInit()
    ` Insert ASM code into getReturnAddress:
    `   0x8B 0x45 0x04      mov eax, [ebp+4]
    `   0xC3                ret
    ` (Bytes reversed to get correct endian-ness:)
    poke dword get ptr to function("getReturnAddress"), 0xC304458B

    global dim guiClip() as guiRectType
    global dim guiIdStack() as guiId
    global dim guiHotParentIds() as guiId
    global dim guiFocusParentIds() as guiId
    global dim guiInteractions() as guiInteractionType
    
    gui.defaultFontId = a2CreateFont("Tahoma", 12, a2Size_Point(), a2Style_Bold())
    gui.fontId = gui.defaultFontId
    
    set message callback "guiWndProc"
endfunction

#constant guiWM_CHAR 0x102
#constant guiWM_KEYDOWN 0x100
#constant guiWM_KEYUP 0x101

function guiWndProc(hwnd as dword, msg as dword, wparam as dword, lparam as dword)
    select msg
        case guiWM_CHAR
            repeatCount = lparam and 0xFFFF
            for i = 1 to repeatCount
                gui.entryBuffer = gui.entryBuffer + chr$(1) + chr$(wparam and 0xFF)
            next i
        endcase
        case guiWM_KEYDOWN
            repeatCount = lparam and 0xFFFF
            for i = 1 to repeatCount
                firstTime = (lparam and 0x40000000) <> 0 and i = 1
                if firstTime
                    gui.entryBuffer = gui.entryBuffer + chr$(2) + chr$(wparam and 0xFF)
                else
                    gui.entryBuffer = gui.entryBuffer + chr$(3) + chr$(wparam and 0xFF)
                endif
            next i
        endcase
        case guiWM_KEYUP
            repeatCount = lparam and 0xFFFF
            for i = 1 to repeatCount
                gui.entryBuffer = gui.entryBuffer + chr$(4) + chr$(wparam and 0xFF)
            next i
        endcase
    endselect
endfunction result

function guiProcessKeyDown(id as guiId, keyCode, firstTime)
    if id <> guiGetFocus()
        exitfunction 0
    endif

    l = fast len(gui.entryBuffer)-1
    for i = 1 to l step 2
        mode = mid ascii(gui.entryBuffer, i)
        if (mode = 2) or ((mode = 3) and (firstTime = 0))
            key = mid ascii(gui.entryBuffer, i+1)
            if key = keyCode
                gui.entryBuffer = remove$(gui.entryBuffer, i, 2)
                
                exitfunction 1
            endif
        endif
    next i
endfunction 0

function guiProcessKeyUp(id as guiId, keyCode)
    if id <> guiGetFocus()
        exitfunction 0
    endif

    l = fast len(gui.entryBuffer)-1
    for i = 1 to l step 2
        mode = mid ascii(gui.entryBuffer, i)
        if mode = 4
            key = mid ascii(gui.entryBuffer, i+1)
            if key = keyCode
                gui.entryBuffer = remove$(gui.entryBuffer, i, 2)
                
                exitfunction 1
            endif
        endif
    next i
endfunction 0

` Will be replaced by ASM code at init time
function getReturnAddress()
endfunction result

` GEN_ID - Generate a unique but consistent control ID
` INDEX_ID(x) - Generate a control ID based on an index
` CHILD_ID(x) - Generate a control ID based on a parent ID
` CHILD_INDEX_ID(x) - Generate a control ID based on a parent ID and an index
#constant GEN_ID INDEX_ID(0)
function INDEX_ID(index)
    result = -(getReturnAddress() << 12) + index
endfunction result
function CHILD_ID(parentId as guiId)
    result = -(getReturnAddress() << 12) + (parentId << 16)
endfunction result
function CHILD_INDEX_ID(parentId as guiId, index)
    result = -(getReturnAddress() << 12) + (parentId << 16) + index
endfunction result

function guiUpdate()

    ` A control must keep itself active to stay active
    if gui.stayActive = 0
        gui.activeId = 0
        gui.delayTime = 0
    else
        gui.stayActive = 0
    endif
    
    gui.veryOldFocusId = gui.oldFocusId
    gui.oldFocusId = gui.focusId
    if gui.overrideFocusId <> -1
        gui.focusId = gui.overrideFocusId
        gui.overrideFocusId = -1
    else
        gui.focusId = gui.newFocusId
    endif
    gui.newFocusId = 0
    
    if gui.oldFocusId <> gui.focusId
        gui.tempScroll = 0
        gui.selStart = 0
        gui.selEnd = 2147483647
    endif
    
    if gui.activeId
        ` Only active control can become hot
        if gui.activeId = gui.nextHotId
            gui.hotId = gui.nextHotId
        else
            gui.hotId = 0
        endif
    else
        gui.hotId = gui.nextHotId
    endif
    gui.nextHotId = 0
    
    ` Get mouse input
    gui.omc = gui.msc
    gui.omx = gui.msx
    gui.omy = gui.msy
    gui.msc = mouseclick()
    gui.msx = mousex()
    gui.msy = mousey()
    ` Mouse down = clicked now and not clicked before
    gui.msd = gui.msc and (not gui.omc)
    ` Mouse up = clicked before and not clicked now
    gui.msu = gui.omc and (not gui.msc)
    
    ` Clear entry
    gui.entryBuffer = ""
endfunction

function guiMoveX(x, minX, maxX, w, minW, maxW)
    oldx = x
    oldw = w
    x = clamp(x + gui.interaction.deltaX, minX, maxX)
    w = clamp(w + gui.interaction.deltaW, minW, maxW)
    
    if gui.interaction.deltaW <> 0 and gui.interaction.deltaX <> 0
        x = oldx+oldw-w
        if x < minX
            x = minX
            w = oldx+oldw-x
        endif
    endif
    
    gui.interaction.deltaW = w-oldw
    gui.interaction.deltaX = 0
endfunction x

function guiMoveY(y, minY, maxY, h, minH, maxH)
    oldy = y
    oldh = h
    y = clamp(y + gui.interaction.deltaY, minY, maxY)
    h = clamp(h + gui.interaction.deltaH, minH, maxH)
    
    if gui.interaction.deltaH <> 0 and gui.interaction.deltaY <> 0
        y = oldy+oldh-h
        if y < minY
            y = minY
            h = oldy+oldh-y
        endif
    endif
    
    gui.interaction.deltaH = h-oldh
    gui.interaction.deltaY = 0
endfunction y

function guiResizeW(w)
    inc w, gui.interaction.deltaW
    gui.interaction.deltaW = 0
endfunction w

function guiResizeH(h)
    inc h, gui.interaction.deltaH
    gui.interaction.deltaH = 0
endfunction h

function guiScrollX()
endfunction gui.interaction.scrollX

function guiScrollY()
endfunction gui.interaction.scrollY

function guiPushClip(x1, y1, x2, y2, scrollx, scrolly, child)

    if child and array count(guiClip()) >= 0
        ox = guiClip().offsetx
        oy = guiClip().offsety
        offsetx = x1 + ox - scrollx
        offsety = y1 + oy - scrolly
        
        ` Intersect clip regions
        x1 = max(x1 + ox, guiClip().x1)
        y1 = max(y1 + oy, guiClip().y1)
        x2 = min(x2, guiClip().x2-guiClip().x1) + guiClip().x1
        y2 = min(y2, guiClip().y2-guiClip().y1) + guiClip().y1
    else
        offsetx = x1 - scrollx
        offsety = y1 - scrolly
    endif

    add to stack guiClip()
    guiClip().x1 = x1
    guiClip().y1 = y1
    guiClip().x2 = x2
    guiClip().y2 = y2
    guiClip().offsetx = offsetx
    guiClip().offsety = offsety
    
    x1 = clamp(x1, 0, draw target width())
    y1 = clamp(y1, 0, draw target height())
    x2 = clamp(x2, x1, draw target width())
    y2 = clamp(y2, y1, draw target height())
    
    if x1 = x2 or y1 = y2
        x1 = -1
        y1 = -1
        x2 = -1
        y2 = -1
    endif
        
    a2SetClip x1, y1, x2, y2
endfunction

function guiPopClip()
    remove from stack guiClip()
    
    if array count(guiClip()) >= 0
        x1 = guiClip().x1
        y1 = guiClip().y1
        x2 = guiClip().x2
        y2 = guiClip().y2
        
        x1 = clamp(x1, 0, draw target width())
        y1 = clamp(y1, 0, draw target height())
        x2 = clamp(x2, x1, draw target width())
        y2 = clamp(y2, y1, draw target height())
        
        if x1 = x2 or y1 = y2
            x1 = -1
            y1 = -1
            x2 = -1
            y2 = -1
        endif
        
        a2SetClip x1, y1, x2, y2
    else
        a2SetClip 0, 0, draw target width(), draw target height()
    endif
endfunction

function guiAdjustX(x)
    if array count(guiClip()) >= 0
        inc x, guiClip().offsetx
    endif
endfunction x

function guiAdjustY(y)
    if array count(guiClip()) >= 0
        inc y, guiClip().offsety
    endif
endfunction y

function guiBeginControl(x, y, w, h, child)
    guiPushClip(x, y, x+w, y+h, 0, 0, child)
endfunction

function guiEndControl()
    guiPopClip()
endfunction

function guiSetHot(id as guiId)
    gui.nextHotId = id
    
    if gui.hotId = id
        N = array count(guiIdStack())
        
        global dim guiHotParentIds(N) as guiId
        for i = 0 to N
            guiHotParentIds(i) = guiIdStack(i)
        next i
    endif
endfunction

function guiIsChildHot(id as guiId)
    N = array count(guiHotParentIds())
    for i = 0 to N
        if id = guiHotParentIds(i)
            exitfunction 1
        endif
    next i
endfunction 0

function guiIsChildFocused(id as guiId)
    N = array count(guiFocusParentIds())
    for i = 0 to N
        if id = guiFocusParentIds(i)
            exitfunction 1
        endif
    next i
endfunction 0

function guiGetHot()
endfunction gui.hotId

function guiSetActive(id as guiId)
    if id
        if gui.activeId = 0
            gui.activeId = id
            gui.stayActive = 1
        else
            exitfunction 0
        endif
    else
        gui.activeId = 0
        gui.stayActive = 0
    endif
endfunction 1

function guiStayActive()
    gui.stayActive = 1
endfunction

function guiGetActive()
endfunction gui.activeId

function guiInRect(x, y, x1, y1, x2, y2)
    if x >= x1 and x < x2
        if y >= y1 and y < y2
            exitfunction 1
        endif
    endif
endfunction 0

function guiInClip(x, y)
    if array count(guiClip()) >= 0
        result = guiInRect(x, y, guiClip().x1, guiClip().y1, guiClip().x2, guiClip().y2)
    else
        result = 1
    endif
endfunction result

function guiInEllipse(x, y, x1, y1, x2, y2)
    rx = (x2-x1)/2
    ry = (y2-y1)/2
    rx2 = rx*rx
    ry2 = ry*ry
    
    dx = x-(x1+x2)/2
    dy = y-(y1+y2)/2
    
    result = (dx*dx)*ry2 + (dy*dy)*rx2 <= rx2*ry2
endfunction result

function guiSetFont(fontId)
    if fontId
        gui.fontId = fontId
    else
        gui.fontId = gui.defaultFontId
    endif
endfunction

function guiPushInteraction()
    add to stack guiInteractions()
    guiInteractions() = gui.interaction

    gui.interaction.deltaX = 0
    gui.interaction.deltaY = 0
    gui.interaction.deltaW = 0
    gui.interaction.deltaH = 0
    gui.interaction.scrollX = 0
    gui.interaction.scrollY = 0
endfunction

function guiPopInteraction()
    gui.interaction = guiInteractions()
    remove from stack guiInteractions()
endfunction

function guiBeginContainer(id as guiId, x, y, w, h, scrollx, scrolly)
    guiPushClip(x, y, x+w, y+h, scrollx, scrolly, 1)
    guiPushInteraction()
    
    add to stack guiIdStack()
    guiIdStack() = id
endfunction

function guiEndContainer()
    remove from stack guiIdStack()

    guiPopInteraction()
    guiPopClip()
endfunction

function guiSetDelay(id as guiId, delay as integer)
    if gui.activeId = id
        gui.delayTime = timer() + delay
    endif
endfunction

function guiClearDelay(id as guiId)
    if gui.activeId = id
        gui.delayTime = 0
    endif
endfunction

function guiHasDelayed()
    if gui.delayTime <> 0 and timer() >= gui.delayTime
        exitfunction 1
    endif
endfunction 0

function guiFocus(id as guiId, tabFocus)
    if gui.newFocusId = 0 then gui.newFocusId = id
    if gui.overrideFocusId = 0 then gui.overrideFocusId = id

    if gui.focusId = id
        gui.newFocusId = id
        
        if guiProcessKeyDown(id, VK_TAB, 0) and tabFocus
            if shiftkey()
                gui.newFocusId = gui.prevFocusId
            else
                gui.newFocusId = gui.nextFocusId
            endif
        endif
        
        gui.nextFocusId = 0
    else
        gui.prevFocusId = id
        if gui.nextFocusId = 0 then gui.nextFocusId = id
    endif

    result = (gui.focusId = id)
    
    if result
        N = array count(guiIdStack())
        
        global dim guiFocusParentIds(N) as guiId
        for i = 0 to N
            guiFocusParentIds(i) = guiIdStack(i)
        next i
    endif
endfunction result

function guiGetFocus()
endfunction gui.focusId

function guiSetFocus(id as guiId)
    gui.overrideFocusId = id
    gui.newFocusId = 0
endfunction

function guiDrawFocusRect(x1, y1, x2, y2, color)
    batchSize = (x2 - x1) + (y2 - y1) + 2
    a2StartDotBatch batchSize
    
    toggle = 1
    for x = x1 to x2-1
        if toggle
            a2Dot x, y1, color
        endif
        toggle = 1-toggle
    next x
    for y = y1 to y2-1
        if toggle
            a2Dot x2, y, color
        endif
        toggle = 1-toggle
    next y
    for x = x2 to x1+1 step -1
        if toggle
            a2Dot x, y2, color
        endif
        toggle = 1-toggle
    next x
    for y = y2 to y1+1 step -1
        if toggle
            a2Dot x1, y, color
        endif
        toggle = 1-toggle
    next y
    
    a2EndBatch
endfunction

#constant CURSOR_FLASH 600

function guiGetCursorVisible()
    result = ((timer() - gui.cursorTimer) mod (CURSOR_FLASH*2)) < CURSOR_FLASH
endfunction result

function guiSetCursorVisible(visible)
    if visible
        gui.cursorTimer = timer()
    else
        gui.cursorTimer = timer() - CURSOR_FLASH
    endif
endfunction

function guiFocusChanged()
    result = gui.veryOldFocusId <> gui.oldFocusId
endfunction result

